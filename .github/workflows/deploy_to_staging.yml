name: "* Deploy To Staging"
run-name: "Deploy To Staging"

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - release-candidate
      - hotfix

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    concurrency:
      group: "Deploy to staging"
      cancel-in-progress: true
    environment: staging
    steps:
      - name: Get branch to build
        id: ref_to_build
        uses: actions/github-script@v6
        with:
          result-encoding: string
          script: |
            let buildBranch = null;
            let ref = null;
            let sha = null;

            const branches = ['hotfix', 'release-candidate', 'main'];
            for (let i = 0; i < branches.length; i++) {
              branchName = branches[i];
              try {
                const { data: branch } = await github.request('GET /repos/{owner}/{repo}/branches/{branch}', {
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  branch: branchName
                });
                buildBranch = branchName;
                ref = branch.ref;
                sha = branch.commit.sha;
                break;
              } catch (error) {
                if (error.status !== 404) {
                  throw error;
                }
              }
            }

            if (context.ref === ref) {
              core.notice(`Current staging branch ${buildBranch}`);
            } else {
              core.notice(`Not deploying to staging; current staging branch is ${buildBranch}`);
            }

            core.setOutput('ref', ref)
            core.setOutput('sha', sha);
      - name: Load local GitHub actions
        uses: actions/checkout@v3
        with:
          sparse-checkout: .github
      - name: Deploy to staging
        uses: ./.github/actions/deploy-application
        with:
          environment: staging
          sha: ${{ steps.ref_to_build.outputs.sha }}
          ref: ${{ steps.ref_to_build.outputs.ref }}
