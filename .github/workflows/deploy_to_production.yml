name: "* Deploy To Production"
run-name: "Deploy To Production"

on:
  workflow_dispatch:
  release:
    types:
      - created
      - edited

jobs:
  get-release:
    name: Get release
    runs-on: ubuntu-latest
    outputs:
      ref: ${{ steps.get_release.outputs.ref }}
      sha: ${{ steps.get_release.outputs.sha }}
    steps:
      - name: Check for latest release
        id: check-for-latest-release
        uses: actions/github-script@v6
        with:
          script: |
            console.log(context);

            let latest = false;
            if (context.eventName === 'workflow_dispatch') {
              latest = true;
            } else {
              const { data: latestRelease } = await github.request('GET /repos/{owner}/{repo}/releases/latest', {
                owner: context.repo.owner,
                repo: context.repo.repo,
              });
              console.log(latestRelease);
              if (latestRelease.tag_name === context.payload.release.tag_name) {
                latest = true;
              }
            }

            core.notice(`Latest release: ${latest}`);
            core.setOutput('latest', latest);
      - name: Load local GitHub actions
        uses: actions/checkout@v3
        if: ${{ steps.check-for-latest-release.outputs.latest == 'true' }}
        with:
          sparse-checkout: .github
      - name: Get release SHA
        id: get_release
        uses: ./.github/actions/get-release-sha
        if: ${{ steps.check-for-latest-release.outputs.latest == 'true' }}
        with:
          tag: ${{ github.event.inputs.tag || github.event.release.tag_name }}
  build-image:
    name: Build Docker image
    runs-on: ubuntu-latest
    needs: get-release
    if: ${{ needs.get-release.outputs.sha }}
    concurrency:
      group: "Build Docker image ${{ needs.get-release.outputs.sha }}"
    steps:
      - name: Load local GitHub actions
        uses: actions/checkout@v3
        with:
          sparse-checkout: .github
      - name: Build Docker image
        uses: ./.github/actions/build-docker-image
        with:
          ref: ${{ needs.get-release.outputs.ref }}
          sha: ${{ needs.get-release.outputs.sha }}
  deploy:
    name: Deploy to production
    runs-on: ubuntu-latest
    needs:
      - get-release
      - build-image
    if: ${{ needs.get-release.outputs.sha }}
    concurrency:
      group: "Deploy to production"
      cancel-in-progress: true
    environment: production
    steps:
      - name: Load local GitHub actions
        uses: actions/checkout@v3
        with:
          sparse-checkout: .github
      - name: Deploy application
        uses: ./.github/actions/deploy-application
        with:
          ref: ${{ needs.get-release.outputs.ref }}
          sha: ${{ needs.get-release.outputs.sha }}
