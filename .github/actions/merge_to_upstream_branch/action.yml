name: Merge a branch to an upstream branch
description: Gets the name of the current pre-release branch.

inputs:
  source-branch:
    description: The name of the branch to merge.
    required: true
  upstream-branch:
    description: The name of the upstream branch to merge into.
    required: true
  labels:
    description: The labels to add to the pull request.
    required: false

runs:
  using: "composite"
  steps:
    - name: Merge banch
      id: merge_branch
      uses: actions/github-script@v6
      env:
        SOURCE_BRANCH: ${{ inputs.source-branch }}
        UPSTREAM_BRANCH: ${{ inputs.upstream-branch }}
      with:
        script: |
          const sourceBranch = process.env.SOURCE_BRANCH;
          const upstreamBranch = process.env.UPSTREAM_BRANCH;
          try {
            await github.request('POST /repos/{owner}/{repo}/merges', {
              owner: context.repo.owner,
              repo: context.repo.repo,
              base: upstreamBranch,
              head: sourceBranch,
              commit_message: 'Merged pre-release to main.'
            });
            core.notice(`Merged ${sourceBranch} to ${upstreamBranch}`);
            return 'success'
          } catch (error) {
            if (error.status === 409) {
              core.warning(`Conflict merging ${sourceBranch} to ${upstreamBranch}`);
            } if (error.status === 404) {
              core.setFailed(`Branch ${sourceBranch} or ${upstreamBranch} not found`);
              return;
            } else {
              throw error;
            }
            return 'failed';
          }
    - name: Open pull request
      if: steps.merge_branch.outputs.result != 'success'
      uses: actions/github-script@v6
      env:
        SOURCE_BRANCH: ${{ inputs.source-branch }}
        UPSTREAM_BRANCH: ${{ inputs.upstream-branch }}
        LABEL: ${{ inputs.labels }}
      with:
        script: |
          const sourceBranch = process.env.SOURCE_BRANCH;
          const upstreamBranch = process.env.UPSTREAM_BRANCH;
          let labels = [];
          if (process.env.LABEL) {
            labels.push(process.env.LABEL);
          }

          const { data: existingPullRequests } = await github.request('GET /repos/{owner}/{repo}/pulls', {
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'open',
            base: upstreamBranch,
            head: `${context.repo.owner}:${sourceBranch}`
          });

          if (existingPullRequests.length > 0) {
            core.notice(`Pull request already exists for ${sourceBranch} to ${upstreamBranch}: ${existingPullRequests[0].html_url}`);
            return;
          }

          const { dataa: pullRequest } = await github.request('POST /repos/{owner}/{repo}/pulls', {
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `[BACKPORT] Failed auto merge from ${sourceBranch}`,
            head: sourceBranch,
            base: upstreamBranch,
            labels: labels,
            body: `This pull request captures a failed merge from ${sourceBranch}. Please reconcile any merge conflicts and merge if appropriate.`
          });
          pullRequest = createResponse.data;
          core.warning('Created pull request to handle the failed merge: ' + pullRequest.html_url);
