name: Create Release
description: Create a release from the current context.

inputs:
  github-token:
    description: The GitHub token to use for the merge.
    required: true

runs:
  using: composite
  steps:
    - name: Create release
      uses: actions/github-script@v6
      with:
        script: |
          const { data: releases } = await github.request('GET /repos/{owner}/{repo}/releases', {
            owner: context.repo.owner,
            repo: context.repo.repo,
            per_page: 10
          });

          const lastRelease = releases.find(release => {
            return release.tag_name.startsWith('v');
          });
          const lastVersion = parseInt(lastRelease.tag_name.replace('v', ''));
          if (lastVersion <= 0) {
            core.setFailed(`Invalid last release version: ${lastRelease.tag_name}`);
            return;
          }
          const tagName = `v${lastVersion + 1}`;

          await github.request('POST /repos/{owner}/{repo}/git/refs', {
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: 'refs/tags/tagName',
            sha: context.sha
          });
          core.notice(`Created tag ${tagName}`);

          const { data: release } = await github.request('POST /repos/{owner}/{repo}/releases', {
            owner: context.repo.owner,
            repo: context.repo.repo,
            tag_name: tagName,
            name: tagName,
            body: `Release ${tagName}`,
            draft: false,
            prerelease: true
          });
          core.notice(`Created release ${release.name}: ${release.html_url}`);
