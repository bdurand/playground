name: Merge a branch into another branch
description: |
  Handles merging code to the upstream branch. Opens a pull request if there is merge conflict.
  This requires a GitHub token with permission to override any branch protection rules.

inputs:
  source-branch:
    description: The name of the branch to merge.
    required: true
  target-branch:
    description: The name of the target branch to merge into.
    required: true
  pull-request-label:
    description: The label to add to the pull request if auto merge fails.
    required: false
  github-token:
    description: The GitHub token to use for the merge.
    required: true

runs:
  using: composite
  steps:
    - name: Merge banch
      id: merge_branch
      uses: actions/github-script@v6
      env:
        SOURCE_BRANCH: ${{ inputs.source-branch }}
        TARGET_BRANCH: ${{ inputs.target-branch }}
      with:
        github-token: ${{ inputs.github-token }}
        script: |
          const sourceBranch = process.env.SOURCE_BRANCH;
          const targetBranch = process.env.TARGET_BRANCH;

          try {
            await github.request('POST /repos/{owner}/{repo}/merges', {
              owner: context.repo.owner,
              repo: context.repo.repo,
              base: targetBranch,
              head: sourceBranch,
              commit_message: `Auto-merge from ${sourceBranch} branch`
            });
            core.notice(`Merged ${sourceBranch} to ${targetBranch}`);
            core.setOutput('merged', 'success');
          } catch (error) {
            if (error.status === 409) {
              core.warning(`Cannot merge ${sourceBranch} to ${targetBranch}`);
              return;
            } if (error.status === 404) {
              core.setFailed(`Branch ${sourceBranch} or ${targetBranch} not found`);
              return;
            } else {
              throw error;
            }
          }
    - name: Open pull request
      if: steps.merge_branch.outputs.merged != 'success'
      uses: actions/github-script@v6
      env:
        SOURCE_BRANCH: ${{ inputs.source-branch }}
        TARGET_BRANCH: ${{ inputs.target-branch }}
        LABEL: ${{ inputs.pull-request-label }}
      with:
        script: |
          const sourceBranch = process.env.SOURCE_BRANCH;
          const targetBranch = process.env.TARGET_BRANCH;

          const { data: existingPullRequests } = await github.request('GET /repos/{owner}/{repo}/pulls', {
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'open',
            base: targetBranch,
            head: `${context.repo.owner}:${sourceBranch}`
          });

          if (existingPullRequests.length > 0) {
            core.notice(`Pull request already exists for ${sourceBranch} to ${targetBranch}: ${existingPullRequests[0].html_url}`);
            return;
          }

          const { data: pullRequest } = await github.request('POST /repos/{owner}/{repo}/pulls', {
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `[BACKPORT] Failed auto merge from ${sourceBranch}`,
            head: sourceBranch,
            base: targetBranch,
            body: `This pull request captures a failed merge from ${sourceBranch}. Please reconcile any merge conflicts and merge if appropriate.`
          });
          core.warning('Created pull request to handle the failed merge: ' + pullRequest.html_url);

          if (process.env.LABEL) {
            await github.request('POST /repos/{owner}/{repo}/issues/{issue_number}/labels', {
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pullRequest.number,
              labels: [process.env.LABEL]
            });
          }
